version: '3.8'

services:
  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: payoova_redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - payoova_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL database (for production)
  postgres:
    image: postgres:15-alpine
    container_name: payoova_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: payoova
      POSTGRES_USER: payoova_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - payoova_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U payoova_user -d payoova"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Main Payoova application
  payoova:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: payoova_app
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      # Application
      NODE_ENV: production
      PORT: 5000
      
      # Database
      DATABASE_URL: postgresql://payoova_user:${POSTGRES_PASSWORD:-secure_password_change_me}@postgres:5432/payoova
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Security (Generate new secrets for production!)
      SECRET_KEY: ${SECRET_KEY:-generate-a-secure-secret-key-for-production}
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-generate-jwt-access-secret}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-generate-jwt-refresh-secret}
      WALLET_ENCRYPTION_KEY: ${WALLET_ENCRYPTION_KEY:-generate-wallet-encryption-key}
      
      # Blockchain (must be provided; no demo defaults)
      ETHEREUM_RPC_URL: ${ETHEREUM_RPC_URL}
      POLYGON_RPC_URL: ${POLYGON_RPC_URL}
      BSC_RPC_URL: ${BSC_RPC_URL}
      INFURA_PROJECT_ID: ${INFURA_PROJECT_ID}
      
      # API Keys
      COINGECKO_API_KEY: ${COINGECKO_API_KEY}
      
      # Email
      SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com}
      SMTP_PORT: ${SMTP_PORT:-587}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASS: ${SMTP_PASS}
      
      # Rate Limiting
      RATE_LIMIT_REQUESTS: ${RATE_LIMIT_REQUESTS:-100}
      RATE_LIMIT_WINDOW: ${RATE_LIMIT_WINDOW:-900}
      
      # Security
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      TOKEN_EXPIRY_HOURS: ${TOKEN_EXPIRY_HOURS:-24}
      
    ports:
      - "5000:5000"
    volumes:
      - app_logs:/app/logs
      - app_data:/app/src/database
    networks:
      - payoova_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: payoova_nginx
    restart: unless-stopped
    depends_on:
      - payoova
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - payoova_network
    profiles:
      - production

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  payoova_network:
    driver: bridge
